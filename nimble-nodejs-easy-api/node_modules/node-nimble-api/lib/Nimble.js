var VERSION = '0.0.8', 
    qs = require('qs'),
    _s = require('underscore.string'),
    SEARCH_FIELDS = ["email", "skype id", "twitter", "linkedin", "facebook", "phone", "last name", "street", "city", "state", "zip",  "country", "company name", "title", "name", "first name", "lead source", "lead type", "lead status", "rating",  "address", "tag",  "custom_fields", "record type", "description", "saved_search"];
    //"company last contacted", "created", "updated",
    var querystring= require('querystring'),
    crypto= require('crypto'),
    https= require('https'),
    http= require('http'),
    URL= require('url')
require('date-utils');

function Nimble(options) {
  if(!(this instanceof Nimble)) return new Nimble(options);

}



/**
 * Wrapper to perform a GET request handling automatically any possible 
 * error due to token expiration. The wrapper will automatically perform
 * a refreshToken request in case we receive an expired token error.
 * 
 * @param  {String}   url      Url to perform the GET request
 * @param  {Function} callback
 */
Nimble.prototype._get = function(url, callback) {
  var self = this,
      resumeRequest = function() {
        return self._get(url, callback);
      };
      get_headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer XXXXXXXXXXXXXXXXXXXX'
      };

  this._request("GET", url, get_headers, null, null, function(err, result, response) {
    
      return callback(null, result, response);
    
  });
}
/**
 * Wrapper to perform a POST request handling automatically any possible 
 * error due to token expiration. The wrapper will automatically perform
 * a refreshToken request in case we receive an expired token error.
 * 
 * @param  {String}   url      Url to perform the POST request
 * @param  {Object}   params   Object containing the params to be sent as body
 * @param  {Function} callback
 */
Nimble.prototype._post = function(url, params, callback) {
  var self = this,
      resumeRequest = function() {
        return self._post(url, params, callback);
      },
      post_data = JSON.stringify(params),
      post_headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer XXXXXXXXXXXXXXXXXXXX'
      };

  this._request("POST", url, post_headers, post_data, null, function(err, result, response) {
    
      return callback(null, result, response);
    
  });
}

/**
 * Wrapper to perform a PUT request handling automatically any possible 
 * error due to token expiration. The wrapper will automatically perform
 * a refreshToken request in case we receive an expired token error.
 * 
 * @param  {String}   url      Url to perform the PUT request
 * @param  {Object}   params   Object containing the params to be sent as body
 * @param  {Function} callback
 */
Nimble.prototype._put = function(url, params, callback) {
  var self = this,
      resumeRequest = function() {
        return self._put(url, params, callback);
      },
      put_data = JSON.stringify(params),
      put_headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer XXXXXXXXXXXXXXXXXXXX'
      };

  this._request("PUT", url, put_headers, put_data, null, function(err, result, response) {
    
      return callback(null, result, response);
    
  });
}

/**
 * Wrapper to perform a DELETE request handling automatically any possible 
 * error due to token expiration. The wrapper will automatically perform
 * a refreshToken request in case we receive an expired token error.
 * 
 * @param  {String}   url      Url to perform the DELETE request
 * @param  {Object}   params   Object containing the params to be sent as body
 * @param  {Function} callback
 */
Nimble.prototype._delete = function(url, params, callback) {
  var self = this,
      resumeRequest = function() {
        return self._delete(url, params, callback);
      },
      del_data = JSON.stringify(params);
      del_headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer XXXXXXXXXXXXXXXXXXXX'
      };

  this._request("DELETE", url, del_headers, del_data, null, function(err, result, response) {
    
      return callback(null, result, response);
    
  });

}

/********** REST API **********/


Nimble.prototype._request= function(method, url, headers, post_body, access_token, callback) {

    var http_library= https;
    var parsedUrl= URL.parse( url, true );
    if( parsedUrl.protocol == "https:" && !parsedUrl.port ) {
      parsedUrl.port= 443;
    }
  
    // As this is OAUth2, we *assume* https unless told explicitly otherwise.
    if( parsedUrl.protocol != "https:" ) {
      http_library= http;
    }
  
    var realHeaders= this._customHeaders;
    realHeaders = headers
    realHeaders['Host']= parsedUrl.host;
  
    realHeaders['Content-Length']= post_body ? Buffer.byteLength(post_body) : 0;
   
  
    var result= "";
    var queryStr= querystring.stringify(parsedUrl.query);
    if( queryStr ) queryStr=  "?" + queryStr;
    var options = {
      host:parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.pathname + queryStr,
      method: method,
      headers: realHeaders
    };
  
    // Some hosts *cough* google appear to close the connection early / send no content-length header
    // allow this behaviour.
    var callbackCalled= false;
    function passBackControl( response, result ) {
      if(!callbackCalled) {
        callbackCalled=true;
        if( response.statusCode != 200 && (response.statusCode != 301) && (response.statusCode != 302) && (response.statusCode != 201)) {
          callback({ statusCode: response.statusCode, data: result });
        } else {
          callback(null, result, response);
        }
      }
    }
  
    var request = http_library.request(options, function (response) {
      response.on("data", function (chunk) {
        result+= chunk
      });
      response.on("close", function (err) {
        if( allowEarlyClose ) {
          passBackControl( response, result );
        }
      });
      response.addListener("end", function () {
        passBackControl( response, result );
      });
    });
    request.on('error', function(e) {
      callbackCalled= true;
      callback(e);
    });
  
    if( ( method === 'POST' || method === 'PUT' || method === 'DELETE' ) && post_body ) {
       request.write(post_body);
    }
    console.log(request)
    request.end();
  }
/** CONTACTS **/

/**
 * Performs contacts listing.
 * http://nimble.readthedocs.org/en/latest/contacts/basic/list.html
 * @param  {Object}   params   params for the contacts listing
 * @param  {Function} callback
 */
Nimble.prototype.findContacts = function(params, callback) {
  params = params || {};

  if(params.query) params.query = JSON.stringify(params.query);
  var get = {
        }
        
    
 var url = 'https://app.nimble.com/api/v1/contacts?query=' + JSON.stringify(get)
  return this._get(url, function(err, result, response) {
    if(err) return callback(err);
    
    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}
/*
  For each one of the available search fields, we define a shortcut method findByFIELD.
  These methods receive an exactly parameter that tells if the search is to be made with the
  "is" operator, or, when available, the "contain" operator.

  http://nimble.readthedocs.org/en/latest/contacts/basic/search.html#available-search-fields

  TODO: Allow search fields "company last contacted", "created" and "updated".
 */
SEARCH_FIELDS.forEach(function(field) {
  
  Nimble.prototype['findBy' + _s.classify(field)] = function(value, exactly, callback) {
    var query = {};

    query[field] = {};
    
    switch(field) {
      //These ones can't find with contain so no doubt about what operator to use
      case "lead source":
      case "lead type":
      case "lead status":
      case "rating":
      case "tag":
      case "record type":
      case "saved search":
        query[field]["is"] = value;
      break;
      //The rest can either find exact match or just containing the value
      default:
        if(exactly) {
          query[field]["is"] = value;
        } else {
          query[field]["contain"] = value;
        }
      break;

    }

    return this.findContacts({query: query}, callback);
  }

});

/**
 * Performs contacts listing using the /ids endpoint, where only
 * ids will be returned.
 *
 * http://nimble.readthedocs.org/en/latest/contacts/basic/list.html
 * @param  {Object}   params   params for the contacts listing
 * @param  {Function} callback
 */
Nimble.prototype.findContactIds = function(params, callback) {
  params = params || {};

  if(params.query) params.query = JSON.stringify(params.query);

  var url = 'https://app.nimble.com/api/v1/contacts/ids?' + qs.stringify(params);
  return this._get(url, function(err, result, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}
Nimble.prototype.findContactEmail = function(params, callback) {
  params = params || {}
  if(params.query) params.query = JSON.stringify(params.query);

  var url = 'https://app.nimble.com/api/v1/contacts?query=' + JSON.stringify(params);
  return this._get(url, function(err, result, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

/**
 * Gets contacts by their id.
 * May receive a comma separated list of ids, a single id, or an array of ids
 *
 * http://nimble.readthedocs.org/en/latest/contacts/basic/details.html
 * @param  {String}   ids      string id, comma separated list of ids, or ids array
 * @param  {Function} callback
 */
Nimble.prototype.findContactsById = function(ids, callback) {
  if(!ids) return callback(new Error('Contact ids required'));

  var _ids = (ids instanceof Array) ? ids.join(',') : ids,
      url = 'https://app.nimble.com/api/v1/contact/' + _ids;

  return this._get(url, function(err, results, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

/**
 * Creates contacts
 *
 * http://nimble.readthedocs.org/en/latest/contacts/basic/create.html
 * @param  {Object}   params   fields for the contact
 * @param  {Function} callback
 */
Nimble.prototype.createContact = function(params, callback) {
  var params = params || {},
      url = 'https://app.nimble.com/api/v1/contact/';
  return this._post(url, params, function(err, result, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(null, res, response);
  });
}

/**
 * Updates contacts
 *
 * http://nimble.readthedocs.org/en/latest/contacts/basic/update.html
 * @param  {String}   id       id of the contact to update
 * @param  {Object}   params   params to update
 * @param  {Function} callback
 */
Nimble.prototype.updateContact = function(id, params, callback) {
  if(!id) return callback(new Error('Contact id is required'));

  var params = params || {},
      url = 'https://app.nimble.com/api/v1/contact/' + id;

  return this._put(url, params, function(err, result, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(null, res, response);
  });
}

/**
 * Deletes contacts
 * May receive a comma separated list of ids, a single id, or an array of ids
 *
 * http://nimble.readthedocs.org/en/latest/contacts/basic/delete.html
 * @param  {String}   ids      string id, comma separated list of ids, or ids array
 * @param  {Function} callback
 */
Nimble.prototype.deleteContact = function(ids, callback) {
  if(!ids) return callback(new Error('Contact ids required'));
  
  var _ids = (ids instanceof Array) ? ids.join(',') : ids,
      url = 'https://app.nimble.com/api/v1/contact/' + _ids;

  return this._delete(url, {}, function(err, results, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

/** NOTES **/

/**
 * Gets notes by their id.
 *
 * http://nimble.readthedocs.org/en/latest/contacts/notes/show.html 
 * @param  {String}   id      string note id
 * @param  {Function} callback
 */
Nimble.prototype.showNote = function(id, callback) {
  if(!id) return callback(new Error('Note id is required'));

  var url = 'https://app.nimble.com/api/v1/contacts/notes/' + id;

  return this._get(url, function(err, results, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

/**
 * List contact notes.
 *
 * http://nimble.readthedocs.org/en/latest/contacts/notes/show.html 
 * @param  {String}   id      string note id
 * @param  {Function} callback
 */
Nimble.prototype.listContactNotes = function(id, callback) {
  if(!id) return callback(new Error('Contact id is required'));

  var url = 'https://app.nimble.com/api/v1/contacts/' + id + '/notes';

  return this._get(url, function(err, results, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

/**
 * Creates a note for the contacts contained in params.contacts_ids
 *
 * http://nimble.readthedocs.org/en/latest/contacts/notes/create.html
 * @param  {Object}   params containing the required params for notes creation: contacts_ids, note, and note_preview
 * @param  {Function} callback
 */
Nimble.prototype.createNote = function(params, callback) {
  var params = params || {};

  if(!params.contact_ids) return callback(new Error('Contacts ids required'));
  if(!params.note) return callback(new Error('Note required'));
  if(!params.note_preview) return callback(new Error('Note preview required'));

  var url = 'https://app.nimble.com/api/v1/contacts/notes/';
  return this._post(url, params, function(err, results, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

/**
 * Updates a note
 *
 * http://nimble.readthedocs.org/en/latest/contacts/notes/update.html
 * @param  {String}   id       Note id 
 * @param  {Object}   params   params containing the required params for notes update: contacts_ids, note, and note_preview
 * @param  {Function} callback [description]
 */
Nimble.prototype.updateNote = function(id, params, callback) {
  if(!id) return callback(new Error('Note id is required'));

  var params = params || {},
      url = 'https://app.nimble.com/api/v1/contacts/notes/' + id;

  return this._put(url, params, function(err, result, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(null, res, response);
  });
}

/**
 * Deletes a note
 *
 * http://nimble.readthedocs.org/en/latest/contacts/notes/delete.html
 * @param  {String}   id       Note id
 * @param  {Function} callback
 */
Nimble.prototype.deleteNote = function(id, callback) {
  if(!id) return callback(new Error('Note id is required'));

  var url = 'https://app.nimble.com/api/v1/contacts/notes/' + id;

  return this._delete(url, {}, function(err, result, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(null, res, response);
  });
}

/**
 * Creates a new task
 * As the due_date must have the format 'YYYY-MM-DD HOURS:MINUTES' we try to
 * perform a conversion in case the string provided does not match the required format.
 * 
 * https://nimble.readthedocs.org/en/latest/activities/tasks/create.html
 * @param  {[Object]}   params   params containing the required param for task creation: subject
 * @param  {Function} callback [description]
 * @return {[type]}            [description]
 */
Nimble.prototype.createTask = function(params, callback) {
  var params = params || {};

  if(!params.subject) return callback(new Error('Subject required'));
  if(params.due_date) {
    try {
      var auxDate = new Date(params.due_date);
      params.due_date = auxDate.toFormat('YYYY-MM-DD HH24:MI');
    }catch(e) {
      return callback(e);
    }    
  }
  var url = 'https://app.nimble.com/api/v1/activities/task/';
  return this._post(url, params, function(err, results, response) {
    if(err) return callback(err);

    var res;
    try {
      res = JSON.parse(result);
    } catch(e) {
      err = e;
    }

    return callback(err, res, response);
  });
}

module.exports = Nimble;


